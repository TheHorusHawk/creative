<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bruno's Website of Things - Development Blog</title><link href="/" rel="alternate"></link><link href="/feeds/development-blog.atom.xml" rel="self"></link><id>/</id><updated>2023-09-05T16:57:21+01:00</updated><entry><title>Website project update</title><link href="/website-project-update.html" rel="alternate"></link><published>2023-09-05T16:57:21+01:00</published><updated>2023-09-05T16:57:21+01:00</updated><author><name>Bruno Teles</name></author><id>tag:None,2023-09-05:/website-project-update.html</id><summary type="html">&lt;p&gt;Second update on website using Pelican&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week the website went live (if you're reading this, something went right) on GitHub pages! It's nice and easy to get a website up and running via a repository. As I had already started the repository, git was refusing to merge but that was easily solved. Nice to use git, as always. Every time something doesn't go my way I understand what why it's acting in the way that it is and I can just focus on how to solve the problem, deepening my understanding as I go about doing it. Maybe it's just that it has really clear error messages - or that my use of it is basic enough that it doesn't get confusing - but it really helps with keeping the frustration at bay.&lt;/p&gt;
&lt;p&gt;Now, for the theme. I looked at different options for themes but didn't find anything that fit what I wanted, so I just rolled up my sleeves and started tweaking the base template to bring it closer to what I wanted. I was kind of dreading having to learn Jinja to do it, but it turns out it's very similar to the templating language Django uses (the imaginatively called Django Templating Language, or DTL) so it was a breeze to get it to do the five or six things I had big issues with.&lt;/p&gt;
&lt;p&gt;Having said that, I may opt for a different theme in the future. I'm not totally happy with how it looks now. I may find a suitable theme, keep tweaking notmyidea, make a new one altogether or a combination of the above. We'll see. But I can live with what it looks like for now, so I can focus on just publishing articles and expanding the site.&lt;/p&gt;
&lt;p&gt;That rolls quite nicely to the third point on my update: I also rewrote some of the stuff here. Have a look around and enjoy. Articles are now labeled and sorted with a date corresponding to their latest modification, or its creation, if there was no modification. So on the home page (click the title to get to it) all articles will be listed in order of newest to oldest, so anything towards the top is the newer stuff.&lt;/p&gt;
&lt;p&gt;That would be all if it weren't for the fact that I also changed the About Me page, which won't show up in the list of articles on the home page (being what Pelican refers to as a "page", which behaves a little differently from other content, but you don't have to worry about that). So, if you're interested in me (and why wouldn't you be?) and/or don't want to miss any changes, remember to also navigate there via the menu above.&lt;/p&gt;
&lt;p&gt;Also, this has been taking up all of my development time, so there will be no updates on my Games Arena project this week. Sorry about that.&lt;/p&gt;
&lt;p&gt;And that's it for this week's update! Really happy to have a website up and running and learning Pelican/Jinja while I do it. It's nice to have a place to showcase my work and to direct people to.&lt;/p&gt;
&lt;p&gt;Until next week!&lt;/p&gt;</content><category term="Development Blog"></category></entry><entry><title>Games Arena: New project first week update</title><link href="/games-arena-new-project-first-week-update.html" rel="alternate"></link><published>2023-08-30T17:03:09+01:00</published><updated>2023-08-30T17:03:09+01:00</updated><author><name>Bruno Teles</name></author><id>tag:None,2023-08-30:/games-arena-new-project-first-week-update.html</id><summary type="html">&lt;p&gt;Django web application, project name Games Arena, week one update.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm starting a new project in Django, which is to be the final project of my Web Development with Python and Javascript course. Unlike other projects of that course, this one I will be doing from scratch, with no seed code. &lt;/p&gt;
&lt;p&gt;This first week, I have initialized the django project and created a screen to choose your nickname. Once you do, or if you already have logged in before, it will take you to the Games Arena proper, where you'll be able to see who else is online so you can choose people to play a game. All this is done via sessions.&lt;/p&gt;
&lt;p&gt;At the moment, being online is implemented only as a button which allows players to make themselves available for a game, but I'm looking to implement a way for the server to tell who is and isn't online automatically. I'm looking to do this via Redis. More news on that, or on my failure to do so, on my next update, I hope.&lt;/p&gt;</content><category term="Development Blog"></category></entry><entry><title>Website: New project using Pelican</title><link href="/website-new-project-using-pelican.html" rel="alternate"></link><published>2023-08-28T18:03:45+01:00</published><updated>2023-08-28T18:03:45+01:00</updated><author><name>Bruno Teles</name></author><id>tag:None,2023-08-28:/website-new-project-using-pelican.html</id><summary type="html">&lt;p&gt;First update on new project, creating a website using Pelican&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm making a static website (this one) in which to keep the different parts of my internet presence organised, and also to help me figure out who am am? (Not not am, must not say am).&lt;/p&gt;
&lt;p&gt;I'm using Pelican, a Python static website generator, and Markdown for the pages. Pelican is very easy to use. Having written websites in clunkier ways (my previous website, which dates from the early 2000s, was written entirely on raw HTML) I found it a breeze to create the content, layout and articles. &lt;/p&gt;
&lt;p&gt;Documentation is short and very well written, with about everything you might need from a website like this. It lends itself to being configured to automate lots of things (such as the article type, category, date of publication and modification) as well as automatically reacting to a new file and, making the output HTML and serving it. So, after just a few tweaks, you're just writing really simple markdown files and saving them. This is a way of working I appreciate, but I'm also reassured I can change the fields being written automatically by manually including them, which I have been making use of to create an archive of past projects based on when I first released them, rather than the date of creation of the article.&lt;/p&gt;
&lt;p&gt;This week, I've initialized my project, configured it to do what I need it to do, been trying out different themes and different functionalities. I like the way there's a base configuration that gets changed based on a smaller, easily readable file (at least so far, as I haven't changed that many parameters) which sets out what you need for testing and that there's a further file with config for when you actually go ahead and publish it. So far, it reads well and works well. Haven't brought it live yet, though, as I want to flesh out the content a little better before I do that, so I'll put a note here detailing how that went&lt;/p&gt;
&lt;p&gt;I've also been using virtualenv to create a virtual environment where I have installed pelican and markdown. This is something I plan to do going forward on other projects, as it is a much neater way to ensure you have what you need for a particular usecase without messing with other projects. I will be using that on the web app I'm developing as well, especially as I'll be working with a database (Redis) which I haven't used before, and I want to make sure I don't break things in the base configuration.&lt;/p&gt;
&lt;p&gt;That's all for now!&lt;/p&gt;</content><category term="Development Blog"></category></entry></feed>